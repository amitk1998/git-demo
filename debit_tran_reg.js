var Sequelize = require('sequelize');

module.exports = function (connection, DataType) {

    var debit_tran_reg = connection.define('debit_tran_reg', {
        batch_id: Sequelize.STRING,
        reverasl_batch_id: Sequelize.STRING,
        mandate_type: { type: Sequelize.STRING(50), unique: 'compositeIndex' },
        bank_code: { type: Sequelize.STRING(50), unique: 'compositeIndex' },
        source_system: { type: Sequelize.STRING(50), unique: 'compositeIndex' },
        company_code: { type: Sequelize.STRING(50), unique: 'compositeIndex' },
        loan_no: { type: Sequelize.STRING(50), unique: 'compositeIndex' },
        mandate_start: { type: Sequelize.DATE, unique: 'compositeIndex' },
        reversal_current_date: Sequelize.DATE,
        account_number: { type: Sequelize.STRING(50), unique: 'compositeIndex' },
        umrn_no: Sequelize.STRING,
        company_name: Sequelize.STRING,
        transaction_type: Sequelize.STRING,
        tpsl_transaction_id: Sequelize.STRING,
        res_flag: Sequelize.STRING,
        res_reason_code: Sequelize.STRING,
        customer_name: Sequelize.STRING,
        mandate_amount: Sequelize.STRING,
        presentment_mode: Sequelize.STRING,
        ach_transaction_code: Sequelize.STRING,
        account_code: Sequelize.STRING,
        res_ach_item_seq_no: Sequelize.STRING,
        res_checksum: Sequelize.STRING,
        ifsc_code: Sequelize.STRING,
        sponsor_bank_ifsc: Sequelize.STRING,
        utility_code: Sequelize.STRING,
        merge_batch_id: Sequelize.STRING,
        record_belongs_from: Sequelize.STRING,
        merge_flag: {
            type: Sequelize.BOOLEAN,
            defaultValue: false
        },
        settalement_date: Sequelize.DATEONLY,
        response_status: Sequelize.STRING,
        response_rejection_reason: {
            type: Sequelize.STRING,
            validate: {
                notContains: '',
            }
        },
        response_remarks: Sequelize.STRING,
        status: Sequelize.STRING,
        debit_reason_code: Sequelize.STRING,
        debit_reason_description: Sequelize.STRING,
        source_system_uniq_number: Sequelize.STRING,
        uniq_ref_number_for_company: Sequelize.STRING,
        account_number_for_company: Sequelize.STRING,
        emi_amount: Sequelize.STRING,
        product_code: Sequelize.STRING,
        subProduct_code: Sequelize.STRING,
        aadhar_number: Sequelize.STRING,
        account_holder_name: Sequelize.STRING,
        email_id: Sequelize.STRING,
        mobile_number: Sequelize.STRING,
        frequency_code: Sequelize.STRING,
        picklist_ref_no: Sequelize.STRING,
        account_type: Sequelize.STRING,
        bank_name: Sequelize.STRING,
        branch_name: Sequelize.STRING,
        branch_code: Sequelize.STRING,
        tpls_instrument_ref_no: Sequelize.STRING,
        micr_code: Sequelize.STRING,
        city: Sequelize.STRING,
        sent_date: Sequelize.STRING,
        dat_date_every_period: Sequelize.STRING,
        cust_ref_no: Sequelize.STRING,
        pod_no: Sequelize.STRING,
        obc_reg_no: Sequelize.STRING,
        upload_status: Sequelize.STRING,
        upload_reject_reason: Sequelize.STRING,
        upload_date_time: Sequelize.STRING,
        merge_date_time: Sequelize.DATE,
        merge_user_name: Sequelize.STRING,
        demerge_date_time: Sequelize.DATE,
        demerge_file_name: Sequelize.STRING,
        demerge_user_name: Sequelize.STRING,
        presentation_remark: Sequelize.STRING,
        isActiveForMerge: Sequelize.STRING,
        bank_branch_code:Sequelize.STRING,
        city_code:Sequelize.STRING,
        Bank_Branch_Identifier_Code:Sequelize.STRING,
        payer_va:Sequelize.STRING,
        upi_notification:Sequelize.STRING,
        icic_bank_rrn:Sequelize.STRING,
        icic_notify_remark:Sequelize.STRING,
        upi_retry_count:Sequelize.STRING,
        upi_merchant_trans_notifiaction_id:Sequelize.STRING,
        upi_merchant_trans_notifiaction_bank_rrn:Sequelize.STRING,
        upi_merchant_trans_notifiaction_response:Sequelize.STRING,
        upi_merchant_trans_execution_id:Sequelize.STRING,
        upi_merchant_trans_execution_response:Sequelize.TEXT,
        upi_merchant_trans_execution_status:Sequelize.STRING,
        upi_merchant_trans_execution_remark:Sequelize.STRING,
        upi_merchant_trans_execution_date:Sequelize.STRING,
        upi_merchant_trans_execution_time:Sequelize.STRING,
        upi_merchant_trans_execution_bank_rrn:Sequelize.STRING,
        emi_seq_no:Sequelize.INTEGER
    },
        {
            indexes: [{ fields: ['bank_code', 'loan_no', 'settalement_date', 'account_number'] }],
            charset: 'utf8', collate: 'utf8_unicode_ci',
            freezeTableName: true,
            tableName: 'debit_tran_reg'

        })

    return debit_tran_reg;
};